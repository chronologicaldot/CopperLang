====================
2018/2/14 - 2018/2/15
v 5-0.31

- Added ObjectList and fixed it.
- Fixed calls to _are_integer and _are_decimal in Engine::setupBuiltinFunctionExecution().
- Added FuncWrapper and void addForeignFuncInstance( Engine&, const String&, bool (*f)( FFIServices& ) )
- Changed VarAddress to be a singly-linked list.
- Changed VarAddress to be reference-counted and saved as pointers, requiring the Opcode usage to be non-const. Effected:
-- FuncFoundTask
-- OpcodeContainer::getOp
- Added Iter::peek to utility list.
- Minor optimizations to RefPtr.
- Re-added the callback system.
- ForeignFunc::isVariadic is not const.
- Added #define COPPER_DEBUG_STACK
- Added PrintScopeObjectNames for debugging the stack.
- Fixed bug in Stack that didn't decrement the size in clear().
- Added Stack::clearNonGlobal and changed Engine::clearStacks() to use it in place of Stack::clear().
- Added Engine::clearGlobals(), Stack::clearGlobal(), and StackFrame::replaceScope().
- Added helper class CallbackWrapper.
- Added helper class ForeignMethod.
- Added helper function void addForeignMethodInstance(Engine&, const String&, BaseClass*, bool (BaseClass::*pMethod)(FFIServices&)).
- Added helper function void addNewForeignFuncInstance( Engine&, const String&, ForeignFunc* ).
- New ObjectTypeIdentifier system tried and removed.
- Added "member_list" as a new built-in function for creating a list of members of a function.
- Added EngineMessage::DestroyedFuncAsMemberListArg and EngineMessage::NonFunctionAsMemberListArg.
- Changed ObjectList::prepend() to push_front() and added push_back(), changing append() to defer to calling it.
- Fixed bug in setupBuiltinFunctionExecution preventing system function calls.
- Implemented stack trace printing in Engine and Stack.
- Removed Logger::printFunctionError interface function.
- Added Logger::printTaskTrace() and Logger::printStackTrace().
- Changed TaskName to TaskType.
- Changed implementation of ObjectString::getIntegerValue() and ObjectString::getDecimalValue() to return converted value forms.
- Fixed String::toInt() to return correct value when string begins with a minus sign.
- Removed address requirement from Logger:::print(LogLevel::Value, EngineMessage::Value) and Logger::print(LogLevel::Value, const char*).

utilPile.h created.

EngMsgToStr
- Updated.

InStreamLogger.h
- Added pretty print.
- Move implementation of print(LogLevel::Value, EngineMessage::Value) to print(LogLevel::Value, const char*).

Printer.h
- Added pretty print.


====================
2018/2/13
v 5-0.3

- Removed getTask() from Opcode and changed Engine to generate the tasks itself.
- Removed Opcode::getCopy() and its implementations.
- MAJOR CHANGE: Changed entire Opcode system to use only Opcode, removing old Opcode implementations.
- Abstracted ownership system for FunctionContainers so that lists can own them.
- Added preprocessor define COPPER_VAR_STRICT_CHECKS for checking/hiding checks on Variable "box" integrity.


====================
2018/1/30
v 5-0.24

Printer.h
- Changed call method to use types for identifying numbers.


====================
2018/1/28
v 5-0.24

- Added Object::getIntegerValue() and Object::getDecimalValue().


====================
2018/1/27
v 5-0.23

- Added List type to built-in types.
- Replaced Number object type with Integer and Decimal types.
- Added ObjectTypeIdentifier.
- ObjectNumber now defaults to ObjectType::Integer but switches to ObjectType::Decimal when decimal is found.
- Removed TT_number and added TT_num_integer and TT_num_decimal.
- Renamed String::isLiteralNumber to numberType() and changed it to return unsigned char values of 0 for no type, 1 for integer, and 2 for decimal.
- Changed Engine::resolveTokenType() to check for numbers and return token based on type.
- TT_binary removed.
- Added typedefs UInteger, Integer, and Decimal.
- Added DECIMAL_ROUNDING_ERROR for checking rounding errors of the Decimal type.
- Replaced unsigned int usages with UInteger in Copper.h and Copper.cpp.
- Replaced int usages with Integer in Copper.h.
- Replaced ObjectNumber with ObjectInteger and ObjectDecimal.
- Replaced Opcode::Value value CreateNumber with CreateInteger and CreateDecimal.
- Added IntegerOpcode and DecimalOpcode.
- Removed Engine::interpretToken case TT_number.
- Added Engine::interpretToken cases TT_num_integer and TT_num_decimal and implemented them.
- Removed case Opcode::CreateNumber from Engine::operate.
- Changed Engine::operate to create numbers with Opcode::CreateInteger and OpcodeCreateDecimal.
- Replaced usages in Engine of ObjectNumber with ObjectInteger.
- Changed Engine::process_sys_member_count() to directly assign integer value to ObjectInteger return and convert the occupancy value to Integer for the final return.
- Removed isObjectNumber().
- Added isObjectInteger().
- Added isObjectDecimal().
- Changed Engine::process_sys_are_number() to use isObjectInteger and isObjectDecimal instead of isObjectNumber.
- Added _are_integer and _are_decimal to SystemFunction enum.
- Added Engine::process_sys_are_integer() and Engine::process_sys_are_decimal().
- Changed Engine::setupBuiltinFunctionExecution() to have implemented cases for _are_integer and _are_decimal.
- Changed Engine::setupSystemFunctions() to save slots for _are_integer (responding to "are_int") and _are_decimal (responding to "are_dcml").
- Changed the following parse functions to look for TT_num_integer and TT_num_decimal instead of TT_number:
-- Engine::ParseFunctionBuild_CollectParameters()
-- Engine::ParseFuncFound_ValidateAssignment()
-- Engine::ParseFuncFound_CollectParams()
- Added Opcode::getIntegerData() and Opcode::getDecimalData().

InStreamLogger.h
- Changed InStreamLogger::printFunctionError to use new typedef UInteger.
- Fixed switch case in InStreamLogger::print() that failed to break after the warning case.


====================
2018/1/27
v 5-0.222

Now on Emu, the new master.


====================
2017/8/12
v 4-0.222

- Added CU_UNUSED_ARG macro to hide warnings from GCC about unused arguments.


====================
2017/5/25
v 4-0.221

docs:
- Added menus to docs in Copper/docs.
- Revised text in README.md


====================
2017/5/4, 5/24
v 4-0.221

- Changed Engine::addForeignFunctionInstance() to addForeignFunction().
- Updated template void addForeignFuncInstance() to use Engine::addForeignFunction().
- Changed profiling code.
- Corrected comparison of parameter count and arg count in Engine::setupForeignFunctionExecution(). Both go to uint now.
- Changed Engine::process_sys_member_count to accept only one parameter.
- Fixed bug in ObjectNumber that was using a numeric constructor for CharList that had been removed. Value was casted to pointer.
-- Added String::appendULong()
- Fixed bug in Engine::process_sys_are_empty() that was returning different results based on argument order.
- Fixed bug for own(), is_ptr(), and is_owner() that failed to collect the parameters correctly.
- Fixed bug in Engine::ParseFuncFound_CollectParams() that did not allow passing execution bodies as parameters.
- Fixed bug in Engine::ParseFunctionBuild_CollectParameters() that failed to properly terminate short object bodies when stream did not end.
- Changed EngineMessage::StreamInterruptedInComment to EngineMessage::StreamHaltedInComment.
- Changed EngineMessage::StreamInterruptedInString to EngineMessage::StreamHaltedInString.
- Added new values to EngineMessage:
-- StreamHaltedParsingNotDone
-- ObjectBodyInvalid
-- ObjectBodyInvalidParamAsgn
-- ObjectBodyInvalidParamPtrAsgn
-- ExecBodyUnfinished
-- ArgBodyIncomplete
-- SystemFuncInvalidAccess
-- ForeignFuncInvalidAccess
-- IfConditionContaminated
-- UselessLoopStopper
-- UselessLoopSkipper
-- SystemFunctionBadArg
-- SystemFunctionWrongArgCount
-- ForeignFunctionWrongArgCount
-- ForeignFunctionBadArg
-- UserFunctionBodyError
-- MemberWrongArgCount
-- IsMemberWrongArgCount
-- SetMemberWrongArgCount
-- replacements of ones saying "Param" to those saying "Arg"

- Removed unused values from EngineMessage:
-- InvalidTokenAtFunctionStart
-- UnusedAsgnInFunctionBuildParams
-- UnusedPtrAsgnInFunctionBuildParams
-- UnusedTokenInFunctionBuildParams
-- PtrAssignedNonName
-- TaskVarIsNull
-- OpeningSystemFuncScope
-- OpeningExtensionFuncScope
-- AttemptToOverrideBuiltinFunc
-- AttemptToOverrideExternalFunc
-- SystemFunctionBadParam
-- SystemFunctionWrongParamCount
-- MemberWrongParamCount
-- IsMemberWrongParamCount
-- SetMemberWrongParamCount
-- and remaining ones saying "Param"

- Limited execution bodies to only containing up to PARSER_OPENBODY_MAX_COUNT-1 (349) number of bodies.
- Removed excessive code from Engine::ParseFuncFound_CollectParams().
- Fixed bug in Engine::ParseLoop_AddEndLoop() that failed to check for tasks in the task stack before using it/them.
- Fixed bug in Engine::parseSRPS() that incorrectly ignored the token immediately after the SRPS function name.
- Added and set Engine::interpretToken() to use new string constants for "own", "is_own", and "is_ptr" to make them customizable.
- Reimplemented Engine::setOwnershipChangingEnabled().
- Removed bool srcDone param from Engine::ParseFuncFound_CollectParams(). It did nothing.

EngMsgToStr.cpp
- Updated.

console.cpp (both Copper/console.cpp and console.cpp)
- Changed call to addForeignFunctionInstance() to addForeignFunction().

InterpreterUsageGuide.html
- Updated text on foreign functions.


====================
2017/5/4
v 4-0.21

- Changed Engine::process_sys_are_same_type() to compare ObjectType::Value first before comparing with typeName().
- Incremented the interpreter branch number to 4.
- Changed Engine::process_sys_type() to return ObjectString even when no args were given.
- Changed ParamsList to ArgsList.
- Changed ParamsIter to ArgsIter.
- Changed FuncFoundTask ArgsList params to Args args.
- Removed FuncFoundTask::getParamsIter().
- Changed FuncFoundTask::addParam() to addArg().


====================
2017/4/30, 5/4
v 4-0.2

- Changed ObjectType enum to: Function, Bool, String, Number, UnknownData.
- Changed isObjectFunction, isObjectEmptyFunction, isObjectBool, isObjectString, and isObjectNumber to use getType() only.
- Deleted class Data.
- Changed ObjectBool inheritance from Data to Object.
- Changed ObjectString inheritance from Data to Object.
- Changed ObjectNumber inheritance from Data to Object.
- Replaced const char* ForeignFunc::getParameterName() with ObjectType::Value ForeignFunc::getParameterType().
- Added static const char* FunctionContainer::StaticTypeName().
- Added static ObjectType::Value FunctionContainer::StaticType().
- Added static ObjectType::Value ObjectBool().
- Added static ObjectType::Value ObjectString().
- Added static ObjectType::Value ObjectNumber().
- Removed moveToTokenResult and unsigned int openBodies in Engine::parseLoopStructure().
- Modified FunctionContainer constructors to initialize with calling Object constructor.

utilList.h
- Changed Iter& Iter::set() to void Iter::set().


====================
2017/4/29
v 4-0.192

Welcome to branch Dolphin, the new master branch!


====================
2017/4/27-29
v 3-0.192

- Fixed bug in Engine::setupUserFunctionExecution() that failed to check the global scope for the existence of a variable before creating it in the local scope.
- Added method List::getConstFirst().
- Changed Engine::setupForeignFunction() to use List::getConstFirst() for address accessing rather than addressToString().
- Optimized RobinHoodHash<T>::getBucketData(String) to shortcut the search by keeping track of the jumps and quiting if the number of jumps exceeded the delay of the currently-examined bucket.
- Added uint String::keyValue() const.
- Changed RobinHoodHash<T>::getInitKey() to use String::keyValue() instead of calculating it on its own.
- Changed Engine::setupBuiltinFunctionExecution() to use List::getConstFirst() for getting the function from the built-in function names hash table.
- Appended const qualifier to ForeignFunc::getParameterName() and ForeignFunc::getParameterCount().
- Changed case ObjectType::Data to "default" for switch cases where it is differentiated from ObjectType::Function.

To do:
- Replace RobinHoodHash usage of zero with nullptr.


====================
2017/4/8-10,23-26
v 3-0.191

- Removed bool srcDone parameter from Engine::interpretToken().
- Removed Engine::opStrandAddNewOperation() and Engine::opStrandAddOperation().
- Added class BadParserStateException.
- Engine::parseFuncBuildTask now throws BadParserStateException when default state is reached.
- Engine::processParseTask now throws BadParserStateException when default state is reached.
- Engine::parseFuncFoundTask now throws BadParserStateException when default state is reached.
- Engine::parseIfStructure now throws BadParserStateException when default state is reached.
- Engine::parseLoopStructure now throws BadParserStateException when default state is reached.
- Removed parameter OpStrandIter& opIter from Engine::setupFunctionExecution() and Engine::setupUserFunctionExecution().
- Commented-out parameter FuncBuildParseTask* task from Engine::ParseFunctionBuild_FromExecBody().
- Removed param bool srcDone from Engine::ParseFuncFound_ValidateAssignment() and Engine::ParseFuncFound_ValidatePointerAssignment().
- Provided short implementations for ForeignFunc::getParameterName() and ForeignFunc::getParameterCount().

- Changed Engine::addForeignFunction() to Engine::addForeignFunctionInstance().
- Changed ForeignFunctionInterface to FFIServices.
- Changed FFIServices::getNextParam() to getNextArg().
- Changed FFIServices::hasMoreParams() to hasMoreArgs().

- Added ObjectString::ObjectString().
- Removed NUMBER_TYPENAME and replaced it with static const char* ObjectNumber::StaticTypeName().
- Removed OBJECTSTRING_TYPENAME and replaced it with static const char* ObjectString::StaticTypeName().
- Added static const char* ObjectBool::StaticTypeName().

- Fixed LoopStructureParseTask::State::CollectBody in Engine::parseLoopStructure().

- Added speed profiling code. Enable with #define COPPER_SPEED_PROFILE.

Printer.h
- Removed Printer::getParameterName() and Printer::getParameterCount().

docs.html
- Changed name to CopperLangGuide.html
- Miscellaneous updates.

InterpreterUsageGuide.html created.

TODO:
- Add Engine::addForeignFunction( const String& pName, bool (*pFunction)( FFIServices& ), bool pIsVariadic ).


====================
2017/3/24 - 2017/4/8
v 3-0.19

Welcome to branch Cheetah!
The bulk of engine processing has been rewritten. The entire processing task system has been replaced by a parsing task system that creates "opcodes" to be executed by the engine. The effected files are:
- Copper.h
- Copper.cpp

Updates to other files:
- Moved EngMsgToStr.h contents of getStringFromEngineMessage() to a .cpp file with the same name and included new error and warning messages.
- Added Iter List::end().
- Added void removeUpTo( const Iter& ).
- Changed Printer to use new FFI.
- Changed premake5.lua file to use -Wall for DebugAll build configuration and changed the configuration names ("ConsoleApp", "DebugAll", and "DebugFe") to all lowercase letters. (The program "make" doesn't support configuration names containing capital letters apparently.)
- Changed List::Iter::operator++() to next() and List::Iter::operator--() to prev().
- Changed List::ConstIter::operator++() to next() and List::ConstIter::operator--() to prev().
- Removed List::Node::removeBefore() and List::Node::removeAfter().
- Fixed bugs in List::Iter::insertBefore() and List::Iter::insertAfter() that failed to set the list head and tail when the node was equal to them before the insertion.
- Added List::Iter::set().


====================
2017/3/14-23
v 2-0.18

- Changed COPPER_VIRTUAL_MACHINE_VERSION to COPPER_INTERPRETER_VERSION.
- Changed COPPER_VIRTUAL_MACHINE_BRANCH to COPPER_INTERPRETER_BRANCH.
- Fixed bug in utilList.h that failed to reset the list head and tail if Iter::destroy() was called.
- Changed "size" to unsigned long and ObjectNumber(String(int)) to ObjectNumber(unsigned long) in Engine::process_sys_member_count().
- Shortened Engine::process_sys_assert() by removing unnecessary setting of lastObject within the loop.

docs.html
- Updated "type" to "type_of".
- Changed "virtual machine" references to say "interpreter".


====================
2017/2/28 - 2017/3/1
v 2-0.18

- Enabled RobinHoodHash::appendCopyOf().
- Removed lists in scopes.
- Added List::pop_front().
- Added List::Iter::operator== and List::ConstIter::operator== .
- Added List::Iter::destroy().

Minor bug: TT_objectbody_close handling in Engine::interpret() should be handled and have its own error code but does not.
To do: Add EngineMessage::OrphanObjectBodyCloser.


====================
2017/2/28
v 2-0.171

- Fixed checks for comparing bucket->data to nullptr in Scope functions. Now using "0" in accordance with RHHash.h.
- Fixed bug in taskPushSystemFunction that incorrectly checked for ownership changing enabled.
- Setup system/built-in functions to be acquired from a hash table instead of by direct namestring comparison.
-- Added control structures to SystemFunction enum-struct.
-- Added RobinHoodHash<SystemFunction> builtinFunctions to Engine.
-- Replaced Engine::taskpushSystemFunction() to use hash table.
-- Added Engine::setupSystemFunctions().
-- Changed Engine constructor to call setupSystemFunctions().


====================
2017/2/14
v 2-0.17

- Changed template<class T> instances to template<typename T> for standards conformance, though it doesn't matter.
- Fixed bug in Engine::processLoop() that didn't clear unfinished tasks above the loop task.
- Added check for invalid token between "loop" and body.
- Minor adjustments to calm g++ warnings. (Parentheses around comparison in String::isLiteralNumber().)

EngMsgToStr.h
- Updated to include processLoop() bad token error.


====================
2017/2/12
v 2-0.17

- Changed "type" to "type_of".
- LANG CHANGE: Version 2.01.
- Fixed bug in String::isLiteralNumber() that failed to properly bound numbers to the range 0-9 and check for decimal.

docs.html
- Updated function information and some tag coloring.

Now tracking CopperLang/IDE folder, containing GTK-sourceview syntax highlighting files.

TODO:
- FIXME: ObjectNumber has no way of being identified as separate from the Number class, thereby making its functions useless. There should be some way of indicating what kind of number it is.


====================
2017/2/12
v 2-0.17

Now on branch "master".

This is the new master branch with syntax changes. The key change is the creation of functions using square brackets instead of "fn". Details will be outlined in docs/docs.html.
Extensions in this branch may use new naming conventions, including the inclusion of numbers and special symbols in names.

- Defined COPPER_VIRTUAL_MACHINE_BRANCH as 2.
- Removed #define COPPER_SHORT_CIRCUIT_FN for enabling short-circuit of function creating using "fn".
- Made #define COPPER_ENABLE_EXTENDED_NAME_SET on by default and added undef macro for disabling it.
- Changed COPPER_LANG_VERSION to 2.
- Changed function creation.
-- Added TT_objectbody_open and TT_objectbody_close.
-- Removed TASK_FCS_from_fn.
-- Changed Engine::constructFunctionFromFN() to Engine::constructFunctionFromObjBody().
-- Changed Engine::interpret() case TT_function_declare to use TT_objectbody_open.
-- Changed Engine::isSpecialCharacter() to look for square brackets and label them TT_objectbody_open,close.
-- Changed Engine::FuncBuild_processAtParamCollect() to use TT_objectbody_close.
-- Removed Engine::FuncBuild_processFromFn().
-- Changed Engine::processFunctionConstruct() to not use TASK_FCS_from_fn.
-- Removed static const char* CONSTANT_FUNCTION_DECLARE.
-- Removed check for CONSTANT_FUNCTION_DECLARE in Engine::resolveTokenType().
-- Changed Engine::FuncFound_processAssignment() to use TT_objectbody_open in place of TT_function_declare.
-- Removed TT_function_declare.
-- Changed Engine::processFunctionConstruct() to check for TT_objectbody_open in place of TT_function_declare in case TASK_FCS_param_value.


====================
2017/2/10
v 0.16

- Minor adjustments to #defines in Copper.h, making undefining easier from outside the Copper.h file.

- Now tracking extensions in outer folder CopperLang/ext.
- Now tracking README.md.


====================
2017/2/9
v 0.16

- Added nameFilter for checking the validity of names rather than implementing a UTF-8 string check.
-- Added Engine::setNameFilter( bool(*filter)(const String&) ).
- Enabled names to have numbers if the preprocessor macro COPPER_ENABLE_NUMERIC_NAMES is defined.
- Enforced strict typing of numbers.
-- Added String::isLiteralNumber().
-- Added EngineMessage::MalformedNumber and incorporated it into Engine::resolveTokenType().
- Enabled names with special characters if the preprocessor macro COPPER_ENABLE_EXTENDED_NAME_SET is defined.
- Bumped Language version to 1.3.
- Optimized string classes by iterating through with pointers. Dangerous change.

docs.html
- Fixed grammar.

premake5.lua
- Cleaned up comments.


====================
2017/2/6-8
v 0.15

- Removed numeric conversion functions from CharList class:
-- explicit CharList( const int pValue )
-- explicit CharList( const unsigned long pValue )
-- explicit CharList( const float pValue )
-- explicit CharList( const double pValue )
- Fixed bug in Engine::FuncFound_processFindMember() that did not handle different types of tasks.
-- Added error messages for opening system and opening external function scopes to engine messages enum.
- Added debug heading message to Variable::getCopy().
- Fixed bug in function running that prevented processes within an ending function from properly finishing.
-- Added TT_function_end_run for indicating to tasks the end of an enclosing function.
-- Changed Engine::interpret() recognize TT_function_end_run (unsure if this does anything).
-- Added constructor to class Token for nameless tokens.
-- Changed Engine::FuncFound_processRunVariable() and Engine::runFunction() to loop process with end-of-function-run tokens until the task stack returned to its pre-run size.

EngMsgToStr.h
- Updated error messages to include scope-opening errors.


====================
2017/2/2-3
v 0.14

- Fixed bug in if statements that prevented exit from being called when a global if-statement was not followed by an else-clause.
-- Added check in performObjProcessAndCycle() to look for exit token.
-- Fixed Engine::ifStatement_seekElse() to return TaskResult::_pop_loop so the next token would be processed.
- Created static const char* arrays OBJECTSTRING_TYPENAME and NUMBER_TYPENAME and set them as the return strings for ObjectString and Number respectively.
- Added const TokenType& to params of Logger::printFunctionError() and const Token& to params of Engine::printFunctionError() and used them in Engine::FuncFound_processRunVariable() and Engine::runFunction().
- Implemented support for passing booleans, numbers, and strings as raw tokens to persistent scope parameters during function construction.
- Capped stack size to 2000 in Engine::process() and created engine message for it.
- Added engine debug message to Engine::handleCommentsAndStrings().
- Renamed Engine::handleCommentsAndStrings() to handleCommentsStringsAndSpecials().
- Added engine debug message to Engine::processTasksOnObjects().
- Fixed identical bugs in Engine::FuncFound_processRunVariable() and Engine::runFunction() that did not reference the function body while running (causing overwritten bodies to segfault).
- Fixed identical bugs in Engine::FuncFound_processRun() that only removed one task, even if it was not its own. There are now loops to remove all higher tasks and its own.
-- Added bool TaskContainer::areSameTask(Task*).

InStreamLogger.h
- Updated InStreamLogger::printFunctionError().

EngMsgToStr.h
- Updated error messages to include stack overflow.


====================
2017/2/1
v 0.13

- Removed enum DataType.
- Added void Scope::copyMembersFrom(Scope&).
- Added void appendNamesToList(List<String>&).
- Fixed unsigned int index creation to uint in Scope::copyAsgnFromHashTable().
- LANG CHANGES:
-- Added function "are_same_type".
--- Changed SystemFunction to have are_same_type.
--- Changed Engine::taskpushSystemFunction()
--- Changed Engine::FuncFound_processRunSysFunction()
--- Added void Engine::process_sys_are_same_type(TaskFunctionFound&)
-- Added function "union", same way as "are_same_type".
--- Added void process_sys_union(TaskFunctionFound&).
- Added check for valid names in process_sys_set_member().
- Changed process_sys_member_count() to allow passing no params to member_count().
- Changed member, member_count, is_member, and set_member error messages.

docs.html
- Updated to include "are_same_type" and "union".

EngMsgToStr.h
- Updated engine messages.


====================
2017/1/25-30
v 0.121

- Created struct (interface) Number and changed NumberObjectFactory to use it. This interface inherits class Data (Object) and contains unsigned long getAsUnsignedLong() const.
- Added ObjectNumber::getAsUnsignedLong().
- Added constructor (const unsigned long) to CharList.
- Added constructors () and (const unsigned long) to ObjectNumber.
- Added default construction for Object that defaults the object type to data so users don't need to set it.
- Changed all FunctionContainer constructors to set their type to ObjectType::Function.
- LANG CHANGE: Made "this" pointer creation in runFunction optional, default off.
-- Added define COPPER_ENABLE_CALLBACK_THIS_POINTER to allow enabling.
- Removed function String Cu::getStringValue( const Object& ).
- Fixed bug that prevented using the immediate-run token in a function execution body (a ={b:}). The task state needed to be set to TASK_FF_collect_params.


====================
2017/1/24
v 0.12

- Added String::toUnsignedLong().
- Changed 0xffffffff comparisons with unsigned max to (unsigned int)-1.
- LANG CHANGE: Added the immediate-run/parameterless call option.
-- Added TT_immediate_run.
-- Changed Engine::FuncFound_processFromStart() switch to check for it.
-- Changed Engine::Engine::isSpecialCharacter() to translate it from the colon character.
- Changed Variable::setFunc() to store container copy before dereferencing (for copies) and reference passed container before dereferencing (for pointers) in case of self-assignment. This does not fix a problem for normal usage (since the VM saves a reference to the data elsewhere) but would have affected deep hooks built in to the VM for IDEs.
- Changed COPPER_LANG_VERSION to 1.2 given the syntax change significance.


=====================
2017/1/16 - 2017/1/21
v 0.11

Goals:
- Improve debugging mechanisms.
- Finalize API.
- Finalize core documentation.

- Implemented debugging features.
-- Added ID to FunctionContainer and made (Function*) constructor (Function*, unsigned int) for setting the ID.
-- Added unsigned int Engine::generateFunctionID().
-- Added void Logger::printFunctionError(unsigned int, unsigned int).
-- Added Engine::printFunctionError(unsigned int, unsigned int) for printing function ID and bad token index.
-- Modified Engine::FuncFound_processRunVariable() and Engine::runFunction() to save token index and use Engine::printFunctionError().
-- Added void Engine::setStackTracePrintingEnabled(bool).
- Changed COPPER_LANG_VERSION to 0.11.
- Changed utilList.h uint from unsigned int to unsigned long.

premake5.lua
- Created premake file.

To do:
- Remove old build scripts.


=====================
2017/1/13, 2017/1/15
v 0.1

- LANG_CHANGE: Finished adding set_member() and type().
- Fixed bug in Engine::process_sys_return() that set the last object using the param iterator when there was no parameter.
- Fixed bug in Engine::processIfStatement() that failed to return when the function mailbox was set.
- LANG CHANGE: Renamed "is_..." functions to "are_" functions whenever they processed more than one variable.
-- Affected: is_fn(), is_empty(), is_bool(), is_string(), is_number().
- Removed writeToInt(), writeToFloat(), and writeToDouble() from ObjectNumber and added getRawValue().
- Fixed bug in Variable::getCopy() that deep copied pointers though it should only deep copy owned function containers.

docs.html:
- Added info about "end_main".
- Added "is_owner()".
- Added "set_member()".
- Added "type()".
- Changed "is_fn()", "is_empty()", "is_bool()", "is_string()", and "is_number()".
- Minor fixes and updates.


=====================
2017/1/5 - 2017/1/6
v 0.1

- Changed List<T> to have and use IndexOutOfBoundsException for operator[](uint) and getFromBack(uint).
- Changed List<T>::remove(Iter) to use NullListNodeException before attempting dereferencing the node pointer.
- Removed List<T>::operator() ( uint, bool ).
- Changed COPPER_VERSION to COPPER_LANG_VERSION and set it to 1.
- Added COPPER_VIRTUAL_MACHINE_VERSION and set it to 0.11.
- Removed stream parameter from tokenize.
- Created blank implementations of copy constructors for Variable, Scope, and TaskFunctionFound. These are deleted when the COMPILE_FOR_C_PLUS_PLUS_11 flag is enabled.
- Changed Logger::log functions to Logger::print.
- Fixed bug in CharList(int) constructor that overflowed when the digit size was that of INT_MAX or close.
- Created NumberObjectFactory and set up the Engine to use it during constructNumber. Added setter.
- Moved const char* dataName() from class Data to class Object, and implemented empty version for FunctionContainer.
- Added bool isObjectOfType( const Object&, const char* ).
- Changed Object::dataName() to Object::typeName().
- Fixed data leak of object copying:
-- In static FunctionContainer* createInitialized(Object*), changed result.set() to result.setWithoutRef().
-- Removed implementation of Object::copy() and implemented it for ObjectBool, ObjectString, and ObjectNumber. This is required to reduce the chance of accidental mismanagement of reference counting by object implementors.


=====================
2016/12/21-24, 2016/12/27-28
v 0.1

- Added constructor method CharList::CharList(const float&).
- Added constructor method CharList::CharList(const int&).
- Fixed String::String(float) error converting from float to string.
- String::String(float) changed to String::String(double).
- String::String(double) deprecated. Use CharList::CharList(double)
- Fixed in String::operator+=() that failed to copy the second string.
- String::operator+=() deprecated. Use CharList::append().
- Optimized entire implementation of String::toFloat().
- Changed String::String(uint) to String::String(int).
- String::String(int) deprecated. Use CharList::CharList(int).
- Added method String::operator(const CharList&).
- Added virtual method void writeToString(String& out) to class Object.
- Added method writeToFloat(float&) and basic implementation to Object base class and ObjectNumber.
- LANG CHANGE: Added function "member_count", which accepts a single function and returns its scope occupancy.
-- Added method EngineResult::Value	process_sys_member(TaskFunctionFound& task).
-- Changed Engine::taskpushSystemFunction() and Engine::FuncFound_processRunSysFunction to process "member_count".
- Fixed variable copying, making it deep copy.
-- Added Variable::getCopy().
-- Changed RefVariableStorage to perfom Variable copying in both of the initialized constructors.
-- Changed ListVariableStorage to perform Variable copying in both of the initialized constructors.
- LANG CHANGE: Added function "is_member", which accepts a function and string and sees if the string is a member name.
-- Added methed EngineResult::Value	process_sys_is_member(TaskFunctionFound& task).
-- Changed Engine::taskpushSystemFunction() and Engine::FuncFound_processRunSysFunction to process "is_member".
- Added Object::writeToInt(int&) and basic implementation to Object base class and ObjectNumber.
- Added Object::writeToDouble(double&) and basic implementation to Object base class and ObjectNumber.
- Fixed bug that prevented loop termination when the return function was encountered during loop running.
- Fixed bug that prevented if-statements from terminating when the return function was encountered during running.
- Changed ForeignFunc::call() to use a constant list (instead of a mutable one).
- Changed List::pop() to return void.
- Changed alias for TT_end_main from "exit" to "end_main".
- Added TaskResult::_done.
- Added TT_exit and modified Engine to terminate when it encountered it in normal processing (not immediately, as with "end_main").
- Fixed bug in Engine::FuncFound_processRunVariable() and Engine::runFunction() that used iterator for atEnd() instead of has(), like it should have.
- LANG CHANGE: Changed name of "is_same" to "are_same" to remove confusion and indicate more than one variable is required.

- Added version number.

- Changed Printer::call() to use writeToString().
- Created float math, integer math, and double math extensions.

docs.html:
- Added "member_count()".
- Added "is_member()".

=====================
2016/12/3

Technically, this project started a few months earlier and gradually picked up speed.
